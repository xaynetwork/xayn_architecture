// Mocks generated by Mockito 5.0.16 from annotations
// in xayn_architecture_example/data/repositories/data_user_repository.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:xayn_architecture_example/data/repositories/data_user_repository.dart'
    as _i3;
import 'package:xayn_architecture_example/domain/entities/user.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeUser_0 extends _i1.Fake implements _i2.User {}

/// A class which mocks [DataUserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataUserRepository extends _i1.Mock
    implements _i3.DataUserRepository {
  MockDataUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.User> create(_i2.User? entity) =>
      (super.noSuchMethod(Invocation.method(#create, [entity]),
              returnValue: Future<_i2.User>.value(_FakeUser_0()))
          as _i4.Future<_i2.User>);
  @override
  _i4.Future<void> delete(String? key) =>
      (super.noSuchMethod(Invocation.method(#delete, [key]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<_i2.User?> single(String? key) =>
      (super.noSuchMethod(Invocation.method(#single, [key]),
          returnValue: Future<_i2.User?>.value()) as _i4.Future<_i2.User?>);
  @override
  _i4.Future<_i2.User> update(String? key, _i2.User? entity) =>
      (super.noSuchMethod(Invocation.method(#update, [key, entity]),
              returnValue: Future<_i2.User>.value(_FakeUser_0()))
          as _i4.Future<_i2.User>);
  @override
  String toString() => super.toString();
}
